{"ast":null,"code":"var _jsxFileName = \"/Users/marzena/gato-negro/src/components/signIn/SignIn.jsx\";\nimport React, { Component, useState } from 'react';\nimport { connect } from 'react-redux';\nimport './signIn.scss';\nimport FormInput from '../formInput/FormInput';\nimport CustomButton from '../button/CustomButton';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/userActions';\n\nclass SignIn extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const {\n        emailSignInStart\n      } = this.props;\n      const {\n        email,\n        password\n      } = this.state;\n      emailSignInStart(email, password);\n    };\n\n    this.handleChange = e => {\n      const {\n        value,\n        name\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    const {\n      googleSignInStart\n    } = this.props;\n    const {\n      email,\n      password\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sign-in\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"email\",\n      type: \"email\",\n      onChange: this.handleChange,\n      value: email,\n      label: \"Email\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"password\",\n      type: \"password\",\n      value: password,\n      onChange: this.handleChange,\n      label: \"Password\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CustomButton, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, \"log in\"), /*#__PURE__*/React.createElement(CustomButton, {\n      onClick: googleSignInStart,\n      type: \"button\",\n      isGoogleSignIn: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, \"log in with Google\"))));\n  }\n\n}\n\n;\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/marzena/gato-negro/src/components/signIn/SignIn.jsx"],"names":["React","Component","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","handleSubmit","event","preventDefault","props","email","password","state","handleChange","e","value","name","target","setState","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component, useState} from  'react';\nimport {connect} from 'react-redux';\nimport './signIn.scss';\nimport FormInput from '../formInput/FormInput';\nimport CustomButton from '../button/CustomButton';\nimport {googleSignInStart, emailSignInStart} from '../../redux/user/userActions';\n\nclass SignIn extends Component {\n\n\nhandleSubmit = async event => {\n    event.preventDefault();\n    const {emailSignInStart} = this.props;\n    const {email, password} = this.state;\n\n    emailSignInStart(email, password);\n\n};\n\nhandleChange = (e) => {\n    const {value, name} = e.target;\n    this.setState({[name]: value})\n};\n\nrender () {\n    const {googleSignInStart} = this.props;\n    const {email, password} = this.state;\n\n    return(\n        <div className=\"sign-in\">\n            <h2 className='title'>I already have an account</h2>\n            <span>Sign in with your email and password</span>\n            <form onSubmit={this.handleSubmit}>\n                <FormInput \n                    name=\"email\" \n                    type=\"email\" \n                    onChange={this.handleChange}\n                    value={email} \n                    label='Email'\n                    required />\n               \n                <FormInput \n                    name=\"password\" \n                    type=\"password\" \n                    value={password} \n                    onChange={this.handleChange}\n                    label='Password'\n                    required />\n               \n\n                <div className=\"buttons\">\n                    <CustomButton type=\"submit\">log in</CustomButton>\n                    <CustomButton onClick={googleSignInStart} type=\"button\" isGoogleSignIn >log in with Google</CustomButton>\n                </div>\n            </form>\n        </div>\n    )}\n};\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({email, password}))\n})\n\nexport default connect(null, mapDispatchToProps)(SignIn)"]},"metadata":{},"sourceType":"module"}