{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport shopActionTypes from './shopTypes';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n  const collectionRef = firestore.collection('collections');\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\n;\nexport function* fetchCollectionsStart() {\n  yield takeEvery(shopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n;","map":{"version":3,"sources":["/Users/marzena/gato-negro/src/redux/shop/shopSagas.js"],"names":["takeEvery","shopActionTypes","fetchCollectionsAsync","console","log","collectionRef","firestore","collection","dispatch","fetchCollectionsStart","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AAEA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACIC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AAEAJ,EAAAA,aAAa,CACZK,GADD,GAECC,IAFD,CAEMC,QAAQ,IAAI;AACd,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAJ,IAAAA,QAAQ,CAACO,uBAAuB,CAACF,cAAD,CAAxB,CAAR;AACH,GALD,EAKGG,KALH,CAKSC,KAAK,IAAIT,QAAQ,CAACU,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAL1B;AAMP;AAAA;AAED,OAAO,UAAUV,qBAAV,GAAiC;AACpC,QAAMT,SAAS,CACXC,eAAe,CAACmB,uBADL,EAEXlB,qBAFW,CAAf;AAIH;AAAA","sourcesContent":["import {takeEvery} from 'redux-saga/effects';\n\nimport shopActionTypes from './shopTypes';\n\nexport function* fetchCollectionsAsync(){\n    yield console.log('I am fired')\n\n    const collectionRef = firestore.collection('collections');\n        dispatch(fetchCollectionsStart());\n\n        collectionRef\n        .get()\n        .then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionsSuccess(collectionsMap));\n        }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n};\n\nexport function* fetchCollectionsStart(){\n    yield takeEvery(\n        shopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    );\n};"]},"metadata":{},"sourceType":"module"}